name: ci

on:
  pull_request:
    branches: [main]

concurrency:
  group: ci-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  checks: write
  id-token: write

env:
  NODE_VERSION: 20
  # Ensure Nx prints useful logs in CI
  NX_VERBOSE_LOGGING: false
  # Avoid Nx daemon issues in ephemeral runners
  NX_DAEMON: false

jobs:
  setup-and-cache:
    name: setup
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-nx.outputs.cache-primary-key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          # Need full history so Nx affected has a proper base commit
          fetch-depth: 0

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install Dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install --no-audit --no-fund
          fi

      - name: Cache Nx (previous runs)
        id: cache-nx
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ hashFiles('package-lock.json', 'pnpm-lock.yaml', 'yarn.lock') }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-${{ hashFiles('package-lock.json', 'pnpm-lock.yaml', 'yarn.lock') }}-
            nx-${{ runner.os }}-

      - name: Print Nx Version / Projects
        run: |
          npx nx --version
          npx nx show projects

  lint:
    name: lint
    runs-on: ubuntu-latest
    needs: setup-and-cache
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - name: Install Dependencies
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install --no-audit --no-fund; fi
      - name: Restore Nx Cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ hashFiles('package-lock.json', 'pnpm-lock.yaml', 'yarn.lock') }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-${{ hashFiles('package-lock.json', 'pnpm-lock.yaml', 'yarn.lock') }}-
            nx-${{ runner.os }}-
      - name: Run lint (all projects)
        run: |
          npx nx affected -t lint --parallel=3 --base=origin/main

  format:
    name: format
    runs-on: ubuntu-latest
    needs: setup-and-cache
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - name: Install Dependencies
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install --no-audit --no-fund; fi
      - name: Prettier Check (all)
        run: |
          npx prettier --version
          npx prettier --check .

  test-unit:
    name: tests / unit
    runs-on: ubuntu-latest
    needs: [lint, format]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - name: Install Dependencies
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install --no-audit --no-fund; fi
      - name: Restore Nx Cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ hashFiles('package-lock.json', 'pnpm-lock.yaml', 'yarn.lock') }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-${{ hashFiles('package-lock.json', 'pnpm-lock.yaml', 'yarn.lock') }}-
            nx-${{ runner.os }}-
      - name: Run Unit Tests (fast, no WP env)
        run: |
          cd packages/core && npx vitest run --coverage src/lib/tests/unit
  test-integration-flow:
    name: tests / integration & flow
    runs-on: ubuntu-latest
    needs: [test-plugin, plugin-check]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - name: Install Dependencies
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install --no-audit --no-fund; fi
      - name: Restore Nx Cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ hashFiles('package-lock.json', 'pnpm-lock.yaml', 'yarn.lock') }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-${{ hashFiles('package-lock.json', 'pnpm-lock.yaml', 'yarn.lock') }}-
            nx-${{ runner.os }}-
      - name: Start WordPress Environment
        env:
          WOO_COMMERCE_VERSION: ''
        run: |
          set -euo pipefail
          echo "Provisioning WordPress + WooCommerce for integration and flow tests..."
          npm run wp:env:up
          npm run wp:cli:fast option get store_sdk_seeded || true
          npm run wp:cli:fast post list --post_type=product --posts_per_page=1 --format=json || true
      - name: Run Integration Tests
        run: |
          cd packages/core && npx vitest run --coverage src/lib/tests/integration
      - name: Run Flow Tests
        run: |
          cd packages/core && npx vitest run --coverage src/lib/tests/flow
      - name: Tear Down WordPress Environment
        if: always()
        run: npm run wp:env:down || true

  test-plugin:
    name: tests / plugin
    runs-on: ubuntu-latest
    needs: [lint, format]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - name: Install Dependencies
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install --no-audit --no-fund; fi
      - name: Restore Nx Cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ hashFiles('package-lock.json', 'pnpm-lock.yaml', 'yarn.lock') }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-${{ hashFiles('package-lock.json', 'pnpm-lock.yaml', 'yarn.lock') }}-
            nx-${{ runner.os }}-
      - name: Start WordPress Environment (shared pattern)
        run: |
          set -euo pipefail
          echo "Provisioning WordPress for plugin tests..."
          npm run wp:env:up
          npm run wp:cli:fast option get store_sdk_seeded || true
      - name: Run WP Plugin Tests
        env:
          WP_BASE_URL: http://localhost:8080
        run: |
          npx vitest run scripts/tests

  plugin-check:
    name: plugin / check
    runs-on: ubuntu-latest
    needs: [lint, format]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - name: Install Dependencies
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install --no-audit --no-fund; fi
      - name: Start WordPress Environment (minimal)
        run: |
          set -euo pipefail
          echo "Provisioning minimal WordPress for plugin check..."
          npm run wp:env:up:minimal
      - name: Run WordPress Plugin Check
        run: |
          set -euo pipefail
          echo "Running WordPress plugin check (errors only)..."

          # Run plugin check and capture output
          npm run wp:plugin:check:json > plugin-check-output.json || true

          # Parse JSON and check for errors (not warnings)
          if [ -f plugin-check-output.json ]; then
            # Count errors (type: "ERROR")
            ERROR_COUNT=$(jq '[.[] | select(.type == "ERROR")] | length' plugin-check-output.json 2>/dev/null || echo "0")
            
            echo "Plugin check completed:"
            echo "- Errors found: $ERROR_COUNT"
            
            # Show all results for visibility
            echo "Full plugin check results:"
            npm run wp:plugin:check || true
            
            # Only fail if there are actual errors
            if [ "$ERROR_COUNT" -gt 0 ]; then
              echo "❌ Plugin check failed with $ERROR_COUNT error(s)"
              echo "Error details:"
              jq '[.[] | select(.type == "ERROR")]' plugin-check-output.json 2>/dev/null || echo "Failed to parse errors"
              exit 1
            else
              echo "✅ Plugin check passed (no errors found, warnings are acceptable)"
            fi
          else
            echo "⚠️ Could not parse plugin check output, running basic check..."
            npm run wp:plugin:check
          fi
      - name: Tear Down WordPress Environment
        if: always()
        run: npm run wp:env:down || true

  build:
    name: build
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration-flow, plugin-check]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - name: Install Dependencies
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install --no-audit --no-fund; fi
      - name: Restore Nx Cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ hashFiles('package-lock.json', 'pnpm-lock.yaml', 'yarn.lock') }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-${{ hashFiles('package-lock.json', 'pnpm-lock.yaml', 'yarn.lock') }}-
            nx-${{ runner.os }}-
      - name: build (all projects)
        run: |
          npx nx affected -t build --parallel=3 --base=origin/main
      - name: Package Size Summary (optional)
        if: always()
        run: |
          find packages -maxdepth 3 -type f -name package.json -printf "\n---- %p ----\n" -exec jq -r '.name + "@" + (.version // "0.0.0")' {} \;
