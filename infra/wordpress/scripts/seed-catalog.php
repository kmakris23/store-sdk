<?php
/**
 * Idempotent sample catalog seeding.
 * - Registers product_brand taxonomy (runtime)
 * - Creates 10 categories, 15 tags, 5 brands
 * - Generates for each category 10 products (1-7 simple, 8-10 variable with size attribute)
 * Skips if any product already exists OR option store_sdk_seeded present.
 */

if ( get_option( 'store_sdk_seeded' ) ) {
    echo "Already seeded (store_sdk_seeded option)."; return; }

if ( ! function_exists('register_taxonomy') ) { require_once ABSPATH . 'wp-includes/taxonomy.php'; }

register_taxonomy('product_brand','product',[
    'label' => 'Brands',
    'public' => true,
    'show_in_rest' => true,
    'rewrite' => ['slug' => 'brand'],
]);

// Helper: ensure term exists and return term_id
function ensure_term($name,$slug,$tax){
    $existing = term_exists( $slug, $tax );
    if ( $existing ) { return (int)$existing['term_id']; }
    $res = wp_insert_term( $name, $tax, ['slug'=>$slug] );
    if ( is_wp_error($res) ) { return 0; }
    return (int)$res['term_id'];
}

$cat_ids = [];
for ($i=1;$i<=10;$i++){ $cat_ids[] = ensure_term("Category $i","category-$i",'product_cat'); }
$tag_ids = [];
for ($i=1;$i<=15;$i++){ $tag_ids[] = ensure_term("Tag $i","tag-$i",'product_tag'); }
$brand_ids = [];
for ($i=1;$i<=5;$i++){ $brand_ids[] = ensure_term("Brand $i","brand-$i",'product_brand'); }

// Attribute taxonomy for variable products
$attr_slug = 'pa_size';
if ( ! taxonomy_exists( $attr_slug ) ) {
    register_taxonomy( $attr_slug, 'product', [ 'hierarchical'=>false, 'label'=>'Size', 'show_in_rest'=>true ] );
}
$sizes = ['small','medium','large'];
foreach($sizes as $s){ if( ! term_exists($s,$attr_slug) ) { wp_insert_term( ucfirst($s), $attr_slug, ['slug'=>$s] ); } }

// Helper to ensure a coupon exists (idempotent)
function ensure_coupon($code,$amount,$type){
    $existing = get_page_by_title($code, OBJECT, 'shop_coupon');
    if ( $existing ) { return; }
    $cid = wp_insert_post([
        'post_title' => $code,
        'post_name'  => sanitize_title($code),
        'post_type'  => 'shop_coupon',
        'post_status'=> 'publish'
    ]);
    if ( is_wp_error($cid) ) { return; }
    update_post_meta($cid,'discount_type',$type);
    update_post_meta($cid,'coupon_amount',$amount);
    update_post_meta($cid,'individual_use','no');
    update_post_meta($cid,'usage_limit','');
    update_post_meta($cid,'free_shipping','no');
}

// If any product exists, still ensure coupons then mark seeded.
if ( get_posts(['post_type'=>'product','posts_per_page'=>1,'fields'=>'ids']) ) {
    ensure_coupon('SUMMER10','10','fixed_cart');
    ensure_coupon('PERCENT15','15','percent');
    update_option('store_sdk_seeded', 1, true);
    echo "Products already present; coupons ensured; marking seeded."; return; }

echo "Generating products..."; 
foreach($cat_ids as $cat_id){
    $cat = get_term($cat_id,'product_cat');
    if ( ! $cat || is_wp_error($cat) ) continue;
    for($p=1;$p<=10;$p++){
        $is_variable = ($p > 7); // last 3 variable
        $title = $cat->name . ' Product ' . $p;
        $post_id = wp_insert_post([
            'post_title' => $title,
            'post_type' => 'product',
            'post_status' => 'publish',
            'post_content' => 'Autogenerated product ' . $p . ' in ' . $cat->name . '.'
        ]);
        if ( is_wp_error($post_id) ) continue;
        wp_set_object_terms($post_id, [$cat_id], 'product_cat');
        // random tags
        if ( $tag_ids ) {
            shuffle($tag_ids); $slice = array_slice($tag_ids,0,3);
            wp_set_object_terms($post_id, $slice, 'product_tag');
        }
        if ( $brand_ids ) {
            shuffle($brand_ids); wp_set_object_terms($post_id, [$brand_ids[0]], 'product_brand');
        }
        if ( ! $is_variable ) {
            $price = rand(10,200);
            update_post_meta($post_id,'_price',$price);
            update_post_meta($post_id,'_regular_price',$price);
            update_post_meta($post_id,'_product_type','simple');
        } else {
            wp_set_object_terms($post_id, $sizes, $attr_slug);
            update_post_meta($post_id,'_product_attributes',[ $attr_slug => [ 'name'=>$attr_slug,'is_visible'=>1,'is_variation'=>1,'is_taxonomy'=>1 ] ]);
            foreach($sizes as $s){
                $variation_id = wp_insert_post([
                    'post_title'  => $title . ' - ' . $s,
                    'post_name'   => 'product-' . $post_id . '-variation-' . $s,
                    'post_status' => 'publish',
                    'post_parent' => $post_id,
                    'post_type'   => 'product_variation'
                ]);
                if ( is_wp_error($variation_id) ) continue;
                update_post_meta($variation_id,'attribute_' . $attr_slug,$s);
                $price = rand(15,220);
                update_post_meta($variation_id,'_price',$price);
                update_post_meta($variation_id,'_regular_price',$price);
                update_post_meta($variation_id,'_stock_status','instock');
            }
            update_post_meta($post_id,'_product_type','variable');
        }
        update_post_meta($post_id,'_manage_stock','no');
        update_post_meta($post_id,'_stock_status','instock');
    }
}
update_option('store_sdk_seeded', 1, true);
// Ensure coupons after products created
ensure_coupon('SUMMER10','10','fixed_cart');
ensure_coupon('PERCENT15','15','percent');
echo "Done (coupons ensured).";
